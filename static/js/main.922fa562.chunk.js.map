{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","dvideo.png","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","uploadVideo","title","loading","add","error","dvideo","methods","hash","send","from","account","on","reload","changeVideo","videos","currentHash","currentTitle","bind","a","this","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","DVideo","networks","Contract","abi","address","videoCount","call","videosCount","i","video","latest","id","className","Component","Navbar","href","rel","src","width","height","alt","Identicon","toString","module","exports","Main","style","maxHeight","controls","minWidth","onSubmit","videoTitle","value","type","accept","onChange","ref","input","placeholder","required","map","key","onClick"],"mappings":"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","file":"static/js/main.922fa562.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport DVideo from '../abis/DVideo.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  /* web3 standard API that take metamask Eth account and inject to the code*/\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    //Load accounts\n    //Add first account the the state\n    const accounts = await web3.eth.getAccounts()\n    console.log(accounts)\n    //Store first item of accounts \n    this.setState({account: accounts[0]})\n    //Get network ID (Configured in metamask)\n    const networkId = await web3.eth.net.getId()\n    //Get network data from generated JSON of smart contract\n    const networkData = DVideo.networks[networkId] \n    //Check if net data exists, then\n      //Assign dvideo contract to a variable\n      if(networkData){\n        const dvideo = new web3.eth.Contract(DVideo.abi,networkData.address)\n        //Add dvideo to the state\n        this.setState({dvideo}) // if same name of state object and local var like above, can write as such\n        //Check videoAmounts\n        const videosCount = await dvideo.methods.videoCount().call() // Call this function/property that is publicly available\n        //Add videAmounts to the state\n        this.setState({videosCount})\n        //Iterate throught videos and add them to the state (by newest-last index)\n        for(var i=videosCount;i>=1;i--){\n          const video = await dvideo.methods.videos(i).call() // Call this properties based on index. This is sort of like simple database object with index\n          this.setState({\n            // Add newly load video to the state array to the last index\n            videos:[...this.state.videos, video]\n          })\n        }\n\n        //Set latest video and it's title to view as default \n        const latest = await dvideo.methods.videos(videosCount).call()\n        this.setState({\n          currentHash: latest.hash,\n          currentTitle: latest.title\n        })\n        //Set loading state to false\n        this.setState({loading:false})\n\n      }else{  \n        window.alert('DVideo smart contract is not deployed to detected network.')\n      }    \n      \n  }\n\n  //Get video\n  captureFile = event => {\n    event.preventDefault()\n    // Get file from input and convert to array buffer\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    \n    // function when reader finished loaded\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result)\n      })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  //Upload video\n  uploadVideo = title => {\n    console.log('Submitting file to IPFS')\n    // Add to IPFS\n    this.setState({loading: true})\n    ipfs.add(this.state.buffer,(error,result)=>{\n      //callback function\n      //Put on blockchain on hash address in IPFS\n      if(error){\n        // Error handling\n        console.log('Error while uploading to IPFS', error)\n        this.setState({loading: true})\n        return\n      } \n      \n      else {\n         console.log('IPFS result', result)\n         // Get hash address from result first array element and title from event\n         // to update state in smart contract, we have to use send and set sender address\n         this.state.dvideo.methods.uploadVideo(result[0].hash,title).send({from: this.state.account})\n         .on('transactionHash',(hash)=>{\n           // callback function after send function on transactionHash event\n           this.setState({loading: false})\n           window. location. reload() \n         })\n      }      \n    })\n  }\n\n  //Change Video\n  changeVideo = (hash, title) => {\n    this.setState({'currentHash': hash})\n    this.setState({'currentTitle': title})\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      account: '',\n      dvideo:null,\n      videos:[],\n      buffer:null,\n      currentHash:null,\n      currentTitle:null\n      //set states\n    }\n\n    //Bind functions\n    this.uploadVideo = this.uploadVideo.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n    this.changeVideo = this.changeVideo.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account}\n          //Account\n        />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main \n              captureFile={this.captureFile} // Link property to event\n              uploadVideo={this.uploadVideo }\n              changeVideo={this.changeVideo}\n              currentHash={this.state.currentHash}\n              currentTitle={this.state.currentTitle}\n              videos={this.state.videos}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\nimport dvideo from '../dvideo.png'\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow text-monospace\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"http://www.dappuniversity.com/bootcamp\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src={dvideo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" />\n          &nbsp;DVide0\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n            {/* Return Account&Identicon using identicon library... */}\n            { this.props.account\n              ? <img\n                className='ml-2'\n                width='30'\n                height='30'\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n                alt=\"\"\n              /> : <span></span>\n            }                            \n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","module.exports = __webpack_public_path__ + \"static/media/dvideo.9e02a88e.png\";","import React, { Component } from 'react';\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid text-monospace\">\n        <br></br>\n        &nbsp;\n        <br></br>\n        <div className=\"row\">\n          <div className=\"col-md-10\">\n            <div className=\"embed-responsive embed-responsive-16by9\" style={{ maxHeight: '768px' }}>\n              <video src={`https://ipfs.infura.io/ipfs/${this.props.currentHash}`}\n              controls />\n            </div>\n            <h3><b><i>{this.props.currentTitle}</i></b></h3>\n          </div>\n          <div className=\"col-md-2 border border-danger overflow-auto text-center\" style={{ maxHeight: '768px', minWidth: '175px' }}>\n            <h5><b>Share Video</b></h5>\n            <form onSubmit={(event) => {\n              event.preventDefault()\n              const title = this.videoTitle.value  \n              this.props.uploadVideo(title)\n            }} >\n              &nbsp;\n              <input type='file' accept=\".mp4, .mkv .ogg .wmv\" onChange={this.props.captureFile} style={{ width: '250px' }} />\n              <div className=\"form-group mr-sm-2\">\n              <input\n                    id=\"videoTitle\"\n                    type=\"text\"                    \n                    ref={(input) => { this.videoTitle = input }} // Capture the submit event value in the field form\n                    className=\"form-control-sm\"\n                    placeholder=\"Title...\"\n                    required />\n              </div>\n              <button type=\"submit\" className=\"btn btn-danger btn-block btn-sm\">Upload!</button>\n              &nbsp;\n            </form>\n            {/* Map Video...*/}\n            {this.props.videos? this.props.videos.map((video, key)=>{\n              return(\n                <div className=\"card mb-4 text-center bg-secondary mx-auto\" style={{ width: '175px'}} key={key} >\n                  <div className=\"card-title bg-dark\">\n                    <small className=\"text-white\"><b>{video.title}</b></small>\n                  </div>\n                  <div>\n                    <p onClick={() => this.props.changeVideo(video.hash, video.title)}>\n                      <video\n                        src={`https://ipfs.infura.io/ipfs/${video.hash}`}\n                        style={{ width: '150px' }}\n                      />\n                    </p>\n                  </div>\n                </div>\n              )\n            }): <span></span>\n          }          \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n"],"sourceRoot":""}